Average Calculator:

Manages a library of students and their weekly averages.
Made to fit the Academy Grading System.

Why averages?

Students are graded daily from 5.0 - 10.0 in several areas (Program, Academics, Athletics, Family Representative, Psychotherapy, and Educational Groups). 

These daily averages are compiled into a weekly average which is recorded to track the student's progress. 

Depending on their averages, students may: participate in extra activities and be entitled to certain priveledges.

The purpose of the Average Calculator?

The Average Calculator is an application that can meet all of a user's needs when it comes to averages; this includes but is not limited to: adding and deleting students, updating daily averages, and compiling weekly averages in an easy to use environment.


Loading and Saving Data:

Student Roster -- 
The Student Roster is saved under the file "names.txt" which is accessed and edited by the Average Calculator. "names.txt" is accessed upon initialization to build a local database of students and averages that can be manipulated by the application. 

Saved Averages --
The actual database of students and their corresponding averages is stored in the file "savedAverages.txt". Information is saved into this file under JSON format and is accessed when a user inputs the "LOAD" command. 
	

	Note: UNDER NO CIRCUMSTANCES SHOULD THE USER TAMPER WITH THESE FILES OUTSIDE OF THE APPLICATION. TAMPERING MAY RESULT IN BAD INITIALIZATION AND APPLICATION FAILURE.



ACS-prototype Commands:

Roster --
Lists all of the students in the currently saved roster.

Quick List --
Lists all of the students and their overall averages.

Add --
Creates new students.

Delete --
Deletes students.


Save --
Saves the changes you have made. (New students, deleted students, daily averages)

Load --
Loads previously saved data.

Exit -- 
Closes the program.


Workflow:

First, I wrote a non graphical test program that had all of the functionality that I wanted for the graphical program. It was a text based prompt that ran in the console or IDLE. Once I was satisfied with the test program, I began designing the GUI and had to rewrite and format the functions from the textbased test program to fit the new interface. I kept the old data structure and simple save/load methods.

The test program is saved as ACS-prototype.py
The editted test program that is imported into the GUI is saved as ACS_clone.py
The final GUI/application is saved as Average-Calculator.py
